#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>

#define TCS34725_ADDR 0x29
#define TCS34725_COMMAND_BIT 0x80
#define TCS34725_CDATAL 0x14
#define TCS34725_CDATAH 0x15
#define TCS34725_RDATAL 0x16
#define TCS34725_RDATAH 0x17
#define TCS34725_GDATAL 0x18
#define TCS34725_GDATAH 0x19
#define TCS34725_BDATAL 0x1A
#define TCS34725_BDATAH 0x1B
#define TCS34725_ENABLE 0x00
#define TCS34725_ENABLE_AIEN 0x10
#define TCS34725_ENABLE_WEN 0x08
#define TCS34725_ENABLE_AEN 0x02
#define TCS34725_ENABLE_PON 0x01

int file;

int init_tcs34725() {
    char *bus = "/dev/i2c-1";
    if ((file = open(bus, O_RDWR)) < 0) {
        printf("Failed to open the bus. \n");
        return -1;
    }
    if (ioctl(file, I2C_SLAVE, TCS34725_ADDR) < 0) {
        printf("Failed to connect to the sensor. \n");
        return -1;
    }
    // Enable the sensor
    uint8_t enable_reg = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN;
    if (write(file, &enable_reg, 1) != 1) {
        printf("Failed to write to the sensor. \n");
        return -1;
    }
    return 0;
}

uint16_t read_word(uint8_t reg) {
    uint8_t buf[2];
    buf[0] = reg | TCS34725_COMMAND_BIT;
    if (write(file, buf, 1) != 1) {
        printf("Failed to write to the sensor. \n");
        return -1;
    }
    if (read(file, buf, 2) != 2) {
        printf("Failed to read from the sensor. \n");
        return -1;
    }
    uint16_t value = buf[1] << 8 | buf[0];
    return value;
}

uint16_t read_clear_channel() {
    uint16_t clear_channel = read_word(TCS34725_CDATAL);
    clear_channel |= read_word(TCS34725_CDATAH) << 8;
    return clear_channel;
}

uint16_t read_green_channel() {
    uint16_t green_channel = read_word(TCS34725_GDATAL);
    return green_channel;
}

uint16_t read_red_channel() {
    uint16_t red_channel = read_word(TCS34725_RDATAL);
    return red_channel;
}

uint16_t read_blue_channel() {
    uint16_t blue_channel = read_word(TCS34725_BDATAL);
    return blue_channel;
}


int calculate_lux(uint16_t r, uint16_t g, uint16_t b) {
    /* Converts the raw R/G/B values to luminosity in lux. */
    int illuminance = (-0.32466 * r) + (1.57837 * g) + (-0.73191 * b);
    if (illuminance < 0) {
        illuminance = 0;
    }
    return illuminance;
}
int lux;

int main() {
    if (init_tcs34725() < 0) {
        return -1;
    }
    uint16_t clear_channel = read_clear_channel();
    uint16_t red_channel = read_red_channel();
    uint16_t green_channel = read_green_channel();
    uint16_t blue_channel = read_blue_channel();
    printf("Clear channel: %d \n", clear_channel);
    printf("Red channel: %d \n", red_channel);
    printf("Green channel: %d \n", green_channel);
    printf("Blue channel: %d \n", blue_channel);
    
    lux = calculate_lux(red_channel, green_channel, blue_channel);
    printf("lux channel: %d \n", lux);
    
    close(file);
    return 0;
    }
